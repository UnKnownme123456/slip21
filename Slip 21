Q1
#include<stdio.h>
#include<stdlib.h>
int main()
{
  int RQ[100],i,n,TotalHeadMoment=0,initial;
  printf("Enter the no. of request:\n");
  scanf("%d",&n);
  printf("Enter the requests sequence\n");
for(i=0;i<n;i++)
 scanf("%d",&RQ[i]);
printf("Enter the initial head position:\n");
scanf("%d",&initial);

for(i=0;i<n;i++)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
initial=RQ[i];
}
printf("Totakl head moment is %d",TotalHeadMoment);
return 0;
}


Q2
#include<stdlib.h>
#include<mpi.h>

#define ARRAY_SIZE 10

int main(int argc,char*argv[])
{
int rank,size;
int i,sum=0;
int data[ARRAY_SIZE];

MPI_Init(&argc,&argv);
MPI_Comm_rank(MPI_COMM_WORLD,&rank);
MPI_Comm_size(MPI_COMM_WORLD,&size);

if(rank==0)
{
 printf("Generating random data...\n");
for(i=0;i<ARRAY_SIZE;i++)
{
data[i]=rand()%100;
printf("The array is:%d\n",data[i]);
}
}
int chunk_size=ARRAY_SIZE;
int *chunk=(int*)malloc(chunk_size*sizeof(int));

MPI_Scatter(data,chunk_size,MPI_INT,chunk,chunk_size,MPI_INT,0,MPI_COMM_WORLD);


int local_sum=0;
for(i=0;i<chunk_size;i++)
{
local_sum +=data[i];
printf("The local sum is:%d\n",local_sum);
}

MPI_Reduce(&local_sum,&sum,1,MPI_INT,MPI_SUM,0,MPI_COMM_WORLD);

if(rank==0)
{
printf("The final sum is:%d\n",sum);
}
free(chunk);
MPI_Finalize():
return 0;
}
